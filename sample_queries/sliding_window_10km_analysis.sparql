PREFIX geo: <http://www.opengis.net/ont/geosparql#>
PREFIX geof: <http://www.opengis.net/def/function/geosparql/>
PREFIX mlit: <http://example.org/mlit/ontology#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

# Advanced sliding window analysis with 10km² grid cells
# This query generates virtual 10km × 10km windows across the region
# and analyzes population and hazard data within each window

SELECT ?windowId ?windowCenter ?totalPopInWindow ?hazardAreaCount ?avgFloodRank ?maxFloodRank ?riskScore
WHERE {
  {
    # Generate 10km sliding windows (approximately 0.1° × 0.1° at this latitude)
    # Grid from 136.0-137.4 longitude, 36.1-37.6 latitude with 0.1° steps
    SELECT ?windowId ?windowCenter ?windowPolygon WHERE {
      VALUES (?lonStep ?latStep) { 
        (136.0 36.1) (136.1 36.1) (136.2 36.1) (136.3 36.1) (136.4 36.1) (136.5 36.1) 
        (136.6 36.1) (136.7 36.1) (136.8 36.1) (136.9 36.1) (137.0 36.1) (137.1 36.1) 
        (137.2 36.1) (137.3 36.1) (137.4 36.1)
        (136.0 36.2) (136.1 36.2) (136.2 36.2) (136.3 36.2) (136.4 36.2) (136.5 36.2)
        (136.6 36.2) (136.7 36.2) (136.8 36.2) (136.9 36.2) (137.0 36.2) (137.1 36.2)
        (137.2 36.2) (137.3 36.2) (137.4 36.2)
        (136.0 36.3) (136.1 36.3) (136.2 36.3) (136.3 36.3) (136.4 36.3) (136.5 36.3)
        (136.6 36.3) (136.7 36.3) (136.8 36.3) (136.9 36.3) (137.0 36.3) (137.1 36.3)
        (137.2 36.3) (137.3 36.3) (137.4 36.3)
        (136.0 36.4) (136.1 36.4) (136.2 36.4) (136.3 36.4) (136.4 36.4) (136.5 36.4)
        (136.6 36.4) (136.7 36.4) (136.8 36.4) (136.9 36.4) (137.0 36.4) (137.1 36.4)
        (137.2 36.4) (137.3 36.4) (137.4 36.4)
        (136.0 36.5) (136.1 36.5) (136.2 36.5) (136.3 36.5) (136.4 36.5) (136.5 36.5)
        (136.6 36.5) (136.7 36.5) (136.8 36.5) (136.9 36.5) (137.0 36.5) (137.1 36.5)
        (137.2 36.5) (137.3 36.5) (137.4 36.5)
      }
      
      BIND(CONCAT("window_", STR(?lonStep), "_", STR(?latStep)) AS ?windowId)
      BIND(CONCAT("POINT(", STR(?lonStep + 0.05), " ", STR(?latStep + 0.05), ")") AS ?windowCenter)
      
      # Create 10km window polygon (0.1° × 0.1°)
      BIND(CONCAT("POLYGON((", 
                  STR(?lonStep), " ", STR(?latStep), ", ",
                  STR(?lonStep + 0.1), " ", STR(?latStep), ", ",
                  STR(?lonStep + 0.1), " ", STR(?latStep + 0.1), ", ",
                  STR(?lonStep), " ", STR(?latStep + 0.1), ", ",
                  STR(?lonStep), " ", STR(?latStep), "))")
           AS ?windowPolygon)
    }
  }
  
  # Aggregate population within each window
  {
    SELECT ?windowId ?windowCenter (SUM(?totalPop) AS ?totalPopInWindow) WHERE {
      # Window definition (repeated from above)
      VALUES (?lonStep ?latStep) { 
        (136.0 36.1) (136.1 36.1) (136.2 36.1) (136.3 36.1) (136.4 36.1) (136.5 36.1) 
        (136.6 36.1) (136.7 36.1) (136.8 36.1) (136.9 36.1) (137.0 36.1) (137.1 36.1) 
        (137.2 36.1) (137.3 36.1) (137.4 36.1)
        # ... (other coordinates truncated for brevity)
      }
      
      BIND(CONCAT("window_", STR(?lonStep), "_", STR(?latStep)) AS ?windowId)
      BIND(CONCAT("POINT(", STR(?lonStep + 0.05), " ", STR(?latStep + 0.05), ")") AS ?windowCenter)
      
      BIND(CONCAT("POLYGON((", 
                  STR(?lonStep), " ", STR(?latStep), ", ",
                  STR(?lonStep + 0.1), " ", STR(?latStep), ", ",
                  STR(?lonStep + 0.1), " ", STR(?latStep + 0.1), ", ",
                  STR(?lonStep), " ", STR(?latStep + 0.1), ", ",
                  STR(?lonStep), " ", STR(?latStep), "))")
           AS ?windowPolygon)
      
      # Find meshes within this window
      ?mesh rdf:type mlit:Mesh ;
            geo:hasGeometry ?meshGeometry ;
            mlit:hasPopulationData ?popSnapshot .
      
      ?meshGeometry geo:asWKT ?meshGeom .
      ?popSnapshot mlit:populationYear "2025"^^xsd:integer ;
                   mlit:totalPopulation ?totalPop .
      
      FILTER(geof:sfIntersects(?meshGeom, ?windowPolygon^^geo:wktLiteral))
      FILTER(?totalPop > 0)
    }
    GROUP BY ?windowId ?windowCenter
  }
  
  # Aggregate hazard data within each window
  {
    SELECT ?windowId (COUNT(?hazardZone) AS ?hazardAreaCount) 
           (AVG(?floodRank) AS ?avgFloodRank) (MAX(?floodRank) AS ?maxFloodRank) WHERE {
      # Window definition (repeated)
      VALUES (?lonStep ?latStep) { 
        (136.0 36.1) (136.1 36.1) (136.2 36.1) (136.3 36.1) (136.4 36.1) (136.5 36.1) 
        # ... (other coordinates)
      }
      
      BIND(CONCAT("window_", STR(?lonStep), "_", STR(?latStep)) AS ?windowId)
      
      BIND(CONCAT("POLYGON((", 
                  STR(?lonStep), " ", STR(?latStep), ", ",
                  STR(?lonStep + 0.1), " ", STR(?latStep), ", ",
                  STR(?lonStep + 0.1), " ", STR(?latStep + 0.1), ", ",
                  STR(?lonStep), " ", STR(?latStep + 0.1), ", ",
                  STR(?lonStep), " ", STR(?latStep), "))")
           AS ?windowPolygon)
      
      # Find hazard zones within this window
      ?hazardZone rdf:type mlit:FloodHazardZone ;
                  geo:hasGeometry ?hazardGeometry ;
                  mlit:hazardType ?hazardType ;
                  mlit:floodDepthRank ?floodRank .
      
      ?hazardGeometry geo:asWKT ?hazardGeom .
      
      FILTER(?hazardType IN ("planned_scale_depth", "maximum_assumed_depth"))
      FILTER(?floodRank >= 3)
      FILTER(geof:sfIntersects(?hazardGeom, ?windowPolygon^^geo:wktLiteral))
    }
    GROUP BY ?windowId
  }
  
  # Apply population threshold and calculate risk score
  FILTER(?totalPopInWindow >= 2000)
  FILTER(?hazardAreaCount > 0)
  
  # Risk score: population × max flood rank × hazard area density
  BIND((?totalPopInWindow * ?maxFloodRank * ?hazardAreaCount) AS ?riskScore)
}
ORDER BY DESC(?riskScore) DESC(?totalPopInWindow) DESC(?maxFloodRank)
LIMIT 20